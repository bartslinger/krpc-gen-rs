// Generated file DO NOT EDIT
import Long from "long";
import { KRPCConnection } from "../../services/connection";
import * as krpc from "../proto/krpc";
import * as encoding from "../../services/encoding";
import ByteBuffer from "bytebuffer";
ByteBuffer.DEFAULT_ENDIAN = true;

export class {{{ service_name }}} {
  private conn: KRPCConnection;
  constructor(conn: KRPCConnection) {
    this.conn = conn;
  }

  {{#each service_methods as |method|}}
  async {{{ method.name }}}({{{ method.arguments_signature }}}): Promise<{{{ method.return_type_signature }}}> {
    {{#if method.arguments }}
    const args = [
    {{#each method.arguments as |argument|}}
      {
        position: {{{ argument.position }}},
        value: {{{ argument.encoder_function }}}({{{ argument.value }}}),
      },
    {{/each}}
    ];
    {{else}}
    const args: Array<krpc.Argument> = [];
    {{/if}}
    const procedureCall = krpc.ProcedureCall.fromPartial({
      service: "{{{ ../service_name }}}",
      procedure: "{{{ procedure }}}",
      arguments: args,
    });
    // eslint-disable-next-line no-unused-vars
    const result = await new Promise<krpc.ProcedureResult>(
      (resolve, reject) => {
        this.conn.scheduleProcedureCall({
          procedureCall,
          resolve,
          reject,
        });
      }
    );
    {{#if before_return }}
    {{{ before_return }}}
    {{/if}}
    return {{{ decoder_function }}};
  }

  {{/each}}

  {{#each service_getters_setters as |method|}}
  async {{{ method.name }}}({{{ method.arguments_signature }}}): Promise<{{{ method.return_type_signature }}}> {
    {{#if method.arguments }}
    const args = [
    {{#each method.arguments as |argument|}}
      {
        position: {{{ argument.position }}},
        value: {{{ argument.encoder_function }}}({{{ argument.value }}}),
      },
    {{/each}}
    ];
    {{else}}
    const args: Array<krpc.Argument> = [];
    {{/if}}
    const procedureCall = krpc.ProcedureCall.fromPartial({
      service: "{{{ ../service_name }}}",
      procedure: "{{{ procedure }}}",
      arguments: args,
    });
    // eslint-disable-next-line no-unused-vars
    const result = await new Promise<krpc.ProcedureResult>(
      (resolve, reject) => {
        this.conn.scheduleProcedureCall({
          procedureCall,
          resolve,
          reject,
        });
      }
    );
    {{{ before_return }}}
    return {{{ decoder_function }}};
  }

  {{/each}}
}

{{#each classes as |class| }}
export class {{{ class.name }}} {
  conn: KRPCConnection;
  id: Long;

  constructor(conn: KRPCConnection, id: Long) {
    this.conn = conn;
    this.id = id;
  }

  static decode(conn: KRPCConnection, result: Uint8Array) {
    const bb = ByteBuffer.wrap(result);
    return new {{{ class.name }}}(conn, bb.readVarint64());
  }

  {{#each class.methods as |method|}}
  async {{{ method.name }}}({{{ method.arguments_signature }}}): Promise<{{{ method.return_type_signature }}}> {
    {{#if method.arguments }}
    const args = [
    {{#each method.arguments as |argument|}}
      {
        position: {{{ argument.position }}},
        value: {{{ argument.encoder_function }}}({{{ argument.value }}}),
      },
    {{/each}}
    ];
    {{else}}
    const args: Array<krpc.Argument> = [];
    {{/if}}
    const procedureCall = krpc.ProcedureCall.fromPartial({
      service: "{{{ ../service_name }}}",
      procedure: "{{{ procedure }}}",
      arguments: args,
    });
    // eslint-disable-next-line no-unused-vars
    const result = await new Promise<krpc.ProcedureResult>(
      (resolve, reject) => {
        this.conn.scheduleProcedureCall({
          procedureCall,
          resolve,
          reject,
        });
      }
    );
    return {{{ decoder_function }}}(this.conn, result);
  }

  {{/each}}
}
{{/each}}
{{!-- impl<'a> {{{ service_name }}}<'a> {
    {{/each}}
}

// Classes
{{#each classes as |class| }}
#[derive(Debug)]
pub struct {{{ class.name }}}<'a> {
    id: u64,
    conn: &'a Connection,
}
impl<'a> {{{ class.name }}}<'a> {
    // methods
    {{#each class.methods as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}
    // getters and setters
    {{#each class.getters_setters as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}
    
    // static methods
    {{#each class.static_methods as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}

}
impl<'a> decoder::KRPCDecode<'a> for {{{ class.name }}}<'a> {
    fn krpc_decode(input: Vec<u8>, conn: &'a Connection) -> Result<Self, decoder::Error> {
        Ok(Self {
            id: decoder::decode_class(input, conn)?,
            conn
        })
    }
}

{{/each}}


{{#each enumerations as |enumeration| }}
pub enum {{{enumeration.name}}}{
    {{#each enumeration.values as |value|}}
    {{{value.name}}} = {{{ value.id }}},
    {{/each}}    
}

{{/each}} --}}