// Generated file DO NOT EDIT
use crate::connection;
use crate::connection::Connection;
use crate::decoder;
use crate::encoder;
use crate::error;

use super::schema;

pub struct {{{ service_name }}}<'a> {
    conn: &'a Connection,
}
impl<'a> {{{ service_name }}}<'a> {
    pub fn new(conn: &'a Connection) -> {{{ service_name }}}<'a> {
        {{{ service_name }}} {
            conn,
        }
    }

    // service methods
    {{#each service_methods as |method|}}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature }}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../service_name }}}", "{{{ procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}

    // getters and setters
    {{#each service_getters_setters as |method|}}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature }}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}
}

// Classes
{{#each classes as |class| }}
#[derive(Debug)]
pub struct {{{ class.name }}}<'a> {
    id: u64,
    conn: &'a Connection,
}
impl<'a> {{{ class.name }}}<'a> {
    // methods
    {{#each class.methods as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}
    // getters and setters
    {{#each class.getters_setters as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = self.conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, self.conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}
    
    // static methods
    {{#each class.static_methods as |method| }}
    pub async fn {{{ method.name }}}({{{ method.arguments_signature}}}) -> Result<{{{ method.return_type_signature }}}, error::Error> {
        {{#if method.arguments }}
        let mut arguments = Vec::new();
        {{else}}
        let arguments = Vec::new();
        {{/if}}
        {{#each method.arguments as |argument| }}
        arguments.push(schema::Argument {
            position: {{{argument.position}}},
            value: encoder::{{{ argument.encoder_function }}}({{{ argument.value }}})?,
        });
        {{/each}}
        let result = conn.execute_procedure("{{{ ../../service_name }}}", "{{{ method.procedure }}}", arguments).await?;
        let return_value = decoder::{{{ decoder_function }}}(result, conn)?;
        Ok({{{ method.return_value }}})
    }

    {{/each}}

}
impl<'a> decoder::KRPCDecode<'a> for {{{ class.name }}}<'a> {
    fn krpc_decode(input: Vec<u8>, conn: &'a Connection) -> Result<Self, decoder::Error> {
        Ok(Self {
            id: decoder::decode_class(input, conn)?,
            conn
        })
    }
}

{{/each}}


{{#each enumerations as |enumeration| }}
pub enum {{{enumeration.name}}}{
    {{#each enumeration.values as |value|}}
    {{{value.name}}} = {{{ value.id }}},
    {{/each}}    
}

{{/each}}